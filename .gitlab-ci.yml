#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

# The following article has been taken as example to build this file:
# https://www.digitalocean.com/community/tutorials/how-to-set-up-a-continuous-deployment-pipeline-with-gitlab-ci-cd-on-ubuntu-18-04#step-4-setting-up-an-ssh-key

# NECESSARY ENVIRONMENT VARIABLES
# - SERVER_IP : the IP of the server where the product is going to be deployed
# - SERVER_USER : the user of the server where the product is going to be deployed
# - SSH_PRIVATE_KEY : follow the instructions in the article cited before to know what insert here

stages:          # List of stages for jobs, and their order of execution
  - dump
  - version
  - build
  - release
  - deploy
  - log

before_script:
  - sed -i 's/stable\/updates/stable-security\/updates/' /etc/apt/sources.list
  - apt update
  - apt install git -y

dump_to_dev:
  stage: dump
  image: "kroniak/ssh-client"
  before_script: []
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - stop server container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop monsteral-tech-server || echo Container has not been initialized yet"
    # 1 - run refres_dev_db script
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "export PGPASSWORD='$DB_USER_PASSWORD' && psql -h localhost -U postgres -f /opt/ci/deployments/monsteral-tech/server/refresh-dev-db.sql"
    # 2 - move to deploy folder and execute docker-compose for the server
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments/monsteral-tech/deploy && docker-compose up -d server"
  when: manual

version:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - git fetch --tags
    - release next-version --bump-patch > .next-version
  artifacts:
    paths:
      - .next-version
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - when: never

compile:
  stage: build
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - echo "some artifact using version " > artifact
    - cat .next-version >> artifact
    - echo "RELEASE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/release" > build_info
    - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
    - echo "RELEASE_SHA=$CI_COMMIT_SHA" >> build_info
    - echo "RELEASE_VERSION=$(<.next-version)" >> build_info
  artifacts:
    paths:
      - build_info
      - artifact
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - when: never

release:
  stage: release
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - git fetch --tags

    - rm -f release_info
    - mv build_info release_info
    - . release_info

    - echo -n "update version information v$RELEASE_VERSION ..."

    - release changelog
    - release commit-and-tag CHANGELOG.md release_info
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link --name release --url $RELEASE_URL --description "$RELEASE_DESC"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - when: never
  allow_failure: true

## To execute the following jobs, it is necessary to have a "production" environment

deploy_prod:
  stage: deploy
  environment:
    name: production
    on_stop: stop_prod
  image: "kroniak/ssh-client"
  before_script: []
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - stop server container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop monsteral-tech-server || echo Container has not been initialized yet"
    # 1 - move to deploy folder, stop server and pull changes from main
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments/monsteral-tech/deploy && git checkout -- . && git checkout main && git pull"
    # 2 - move to server folder, get changes from main and move to the given commit
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments/monsteral-tech/server && git checkout -- . && git checkout main && git pull && git reset --hard $CI_COMMIT_SHA"
    # 3 - move to deploy folder again and execute docker-compose only for the server
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments/monsteral-tech/deploy && docker-compose up -d server"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TASK_NAME == "night-deploy"'
      when: always
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
    # Uncomment the following two lines to active auto-deployment when a commit is done over the main branch
    #- if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    #  when: always
    - when: never

stop_prod:
  stage: deploy
  environment:
    name: production
    action: stop
  image: "kroniak/ssh-client"
  before_script: []
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - stop server container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop monsteral-tech-server"
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: manual
    - when: never

generate_daily_log_file:
  stage: log
  image: "kroniak/ssh-client"
  before_script:
    - apk add coreutils
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - checks if directory "/home/$SERVER_USER/logs/monsteral-tech" exists and creates it if does not
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "(ls /home/ci/logs/monsteral-tech/ > /dev/null) || (mkdir -p /home/ci/logs/monsteral-tech/ && echo Directories created successfully)"
    # 1 - get logs from last day and save it in "/home/$SERVER_USER/logs/monsteral-tech" directory
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker logs monsteral-tech-server --since $(date -u -d "yesterday 00:00" '+%s')  --until $(date -u -d "today 00:00" '+%s') > /home/$SERVER_USER/logs/monsteral-tech/$(date -u -d "yesterday 00:00" '+%F_%H_%M').log"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TASK_NAME == "log-file-generation"'
